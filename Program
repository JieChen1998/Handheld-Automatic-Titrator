#include <HT66F2390.h>
typedef	unsigned long	u32;
typedef	unsigned short	u16;
#define	fH		8000000//16000000	
#define BR		9600       //波特率
#define SEG_Port   _pf
#define SEG_PortC  _pfc
/*#define COM_Port   _pf
#define COM_PortC  _pfc*/
 
#define LED0C	_phc0					
#define LED0	_ph0

#define LED1C	_phc1					
#define LED1	_ph1

#define LED3C	_pgc4					
#define LED3	_pg4

#define SW_Port   _pa2       //int0 pa1
#define SW_PortC  _pac2
#define SW_PortPU _papu2

#define	WREN			0x08		
#define	WR		        0x04		
#define	RDEN			0x02		
#define	RD			0x01		

const unsigned short SEG_TAB[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};
const unsigned short COM_TAB[]={0x01,0x02,0x04,0x08};

void pwm_output(unsigned short pwm);
void Delayms(u16 del);
void Titration_detection();
int start_mode=0;
volatile unsigned int diff_value;
void set_value();
unsigned long int didin_value=0,set_didin_value=0,SleepCount=0;
unsigned short out=0; 
unsigned long result=0;
int buttonup=1;
float waste=0,last=0;
int num10,num1,num,didin_level;
float per_didin_value;
unsigned int uart1data=0,uart2data=0;
int len,last_value,last_value1,last_value2;
int last10,last1,count=0;
int dnum10,dnum1,dnum,step=0;
void Delayms(u16 del)
{	
	u16 i,j;
	for(j=0;j<del;j++)
	{
	  for(i=0;i<25;i++)  //4us*25=100us
	  {
		 GCC_NOP();      //4us
	  }
	}
}
void send_char1(char s)
{
	_txr_rxr0=s;
	while(!_txif0);	
}
void send_buff1(char *s)
{
	while(*s)
	{
		send_char1(*s);
		s++;
	}
}
void send_char2(char s)
{
	_txr_rxr2=s;
	while(!_txif2);	
}
void send_buff2(char *s)
{
	while(*s)
	{
		send_char2(*s);
		s++;
	}
}

unsigned int Read(void)
{
	_mp1h=0x01;	 _mp1l=0x40;
	_iar1=RDEN;	_iar1|=RD;
	while(_iar1 & RD);
	_iar1=0;
	return _eed;	
}

void Write(unsigned int ptr)
{
	_eed=ptr;										
	_mp1h=0x01; _mp1l=0x40;								
	_iar1=WREN; _iar1|=WR;							
	while(_iar1&WR);									
	_iar1=0;
}


void pwm_output(unsigned short pwm)
{
	_ptm2al=pwm & 0xff;    
    _ptm2ah=(pwm>>8)&0x03;
}

void inituart()     //pa6 RX0   pa7 TX0    pg0 RX2  pg1 TX2
{
	//_scc=0b00000000;        
    //_hircc=0b00001011;
    _pas1=0b11110000;   
	_u0cr1=0b10000000; 
	_u0cr2=0b11101100;  
    _brg0=fH/((u32)16*BR)-1;

	
	_ifs3=0b00000100;
    _pgs0=0b00001111;
    _u2cr1=0b10000000;
    _u2cr2=0b11101100;
	_brg2=fH/((u32)16*BR)-1;
	

	_mf5e=1; 
    _ur0e=1;
    _ur2e=1;        
	_emi=1;
}

int get_buff1(char *rbuff,char c)
{
	//uart1=1;
	char rdata1;
    int data_count1=0,uart1TimeOut=0;
	while(1)
	{
		while(!_rxif0) 
		{
			uart1TimeOut++;
		    if(uart1TimeOut>1000)
		    {
		    	uart1TimeOut=0;
		    	return 0;
		    }
		}
	    rdata1 =_txr_rxr0;
	    if(rdata1==c)
		{
		   rbuff[data_count1]='\xff';
		   return data_count1;
		}
		
		rbuff[data_count1]=rdata1;
		
		data_count1++;
	}  	       			  	
}

void check1(char *xbuff)
{
	step=0;
    if(xbuff[0]==0x65 && xbuff[1]==0x00 && xbuff[2]==0x05)  //停止
	{
		//LED0=0;
		start_mode=0;
        _pds0=0b00000000;     ////pd2
		_pbs0=0b00000000;    /////pb3   
        out=0;
        SleepCount=0;
        count=0;
        //last_value=last_value2;
        //LED0=0;
        //_st2on=0;
	}
	else if(xbuff[0]==0x6E && xbuff[1]==0x3D && xbuff[2]==0x71)  ///mode 2 開始滴
	{
		//LED0=1;
		waste=0;
		last=0;
		start_mode=2;
		count=0;
	    didin_value=xbuff[3];
		set_value();
    }
    else if(xbuff[0]==0x64 && xbuff[1]==0x3D && xbuff[2]==0x71)  ///開始吸
	{
		//LED0=0;
		waste=0;
		last=0;
		count=0;
		start_mode=1;
		set_didin_value=xbuff[3];
		send_buff2("d=");
	    send_char2(set_didin_value);
	    send_char2('\xff');
	    set_value();
    }
    else if(xbuff[0]==0x65 && xbuff[1]==0x07 && xbuff[2]==0x05)
    {
    	_eeah=0x00;_eeal=0x05;
    	Write(0); 
    	last_value2=0;last_value=0;
    }

}

int get_buff2(char *rbuff1,char c1)
{
	char rdata2;
    unsigned int data_count2=0,uart2TimeOut=0;
	while(1)
	{
		while(!_rxif2)
		{
			uart2TimeOut++;
		    if(uart2TimeOut>1000)
		    {
		    	uart2TimeOut=0;
			    return 0;
			}
		} 
	    rdata2 =_txr_rxr2;
	    if(rdata2==c1)
		{
		   rbuff1[data_count2]='\xff';
		   return data_count2;
		}
		
		rbuff1[data_count2]=rdata2;
		data_count2++;
		
		//send_char1(data_count2);
	}  	       			  	
}

void check2(char *xbuff)
{
	int i=0;
	step=0;
	if(xbuff[0]==0x73 && xbuff[1]==0x74 && xbuff[2]==0x6F)  ///stop
	{
		LED1=0;
		start_mode=0;
        _pds0=0b00000000;     ////pd2
		_pbs0=0b00000000;    /////pb3   
        out=0;
        count=0;
        SleepCount=0;
        //_st2on=0;
	}
	else if(xbuff[0]==0x6E && xbuff[1]==0x32 && xbuff[2]==0x3D)  ///mode 2 開始滴
	{
		//LED3=0;
		num10=xbuff[3];
        num1=xbuff[4];
        waste=0;
        count=0;
		start_mode=4;
		set_value();
    }
	else if(xbuff[0]==0x64 && xbuff[1]==0x32 && xbuff[2]==0x3D)  ///mode 1 開始吸
	{
		//LED3=1;
		num10=xbuff[3];
        num1=xbuff[4];
        waste=0;
        count=0;
		start_mode=3;
	    set_value();
	}
	else if(xbuff[0]==0x49 && xbuff[1]==0x50 && xbuff[2]==0x3D)
	{
		LED1=1;
	    send_buff1("wifi.t5.txt=");
	    send_char1('"');
	    for(i=3;i<=uart2data-1;i++){
	       send_char1(xbuff[i]);
	    }
        send_char1('"');
	    send_buff1("\xff\xff\xff");
	}
	
}

void set_value()
{
	SleepCount=0;
	if(count==0)
	{
	  last_value=last_value2;
	  count++;
	}
	if(start_mode==1)
	{
        _pds0=0b00010000;     ////pd2
        _pbs0=0b00000000;    /////pb3   
        //_ptm2al=0xF4;    
        //_ptm2ah=0x01;
        //_st2on=0;
        diff_value=set_didin_value;
	}
	if(start_mode==2)
	{
        _pds0=0b00000000;     ////pd2
        _pbs0=0b11000000;    /////pb3   
        //_ptm2al=0xF4;    
        //_ptm2ah=0x01;
        //_st2on=1;
        last_value=last_value2;
        diff_value=didin_value;
	}
	if(start_mode==3)
	{
		if(num10<=0x30 && num1<=0x30)
        {
            set_didin_value=0;
        }
        else if(num10<=0x30 && num1>0x30)
        {
            set_didin_value=num1-0x30;
        }
        else if(num10>=0x30 && num1>=0x30)
        {
            set_didin_value=(num10-0x30)*10+(num1-0x30);
        }
        _pds0=0b00010000;     ////pd2
        _pbs0=0b00000000;    /////pb3   
        //_st2on=0;
        diff_value=set_didin_value;
        send_buff2("d=");
	    send_char2(set_didin_value);
	    send_char2('\xff');
	    start_mode=1;
	}
	if(start_mode==4)
	{
		if(num10<=0x30 && num1<=0x30)
        {	
            didin_value=0;
        }
        else if(num10<=0x30 && num1>0x30)
        {
            didin_value=num1-0x30;
        }
        else if(num10>=0x30 && num1>=0x30)
        {
            didin_value=(num10-0x30)*10+(num1-0x30);
        }
        _pds0=0b00000000;     ////pd2
        _pbs0=0b11000000;    /////pb3   
        //_st2on=1;
        diff_value=didin_value;
        start_mode=2;
	}
	didin_level=diff_value/5
}

void initpwm()     //pd2   pd4
{
    _ptm2c0=0b01000000;     
    _ptm2c1=0b10101001;  
    _ptm2rpl=0xE8;          
    _ptm2rph=0x03; 
    _pt2on=1;     
    _emi=1;
}

void initTimer()
{
    _stm2c0=0b01000000;					
	  _stm2c1=0b11000001;					
	  _stm2al=0x10; _stm2ah=0x27;        
	  _stm2ae=1; _mf4e=1; _emi=1;								
}

void ADC()
{
	_sadc0=0b00110000;						
	_sadc1=0b00000111;					   
	_sadc2=0b00000000;						//禁能PGA, 並參考電壓為AVDD
	_pcs0=0b00000011;
	_ade=1; _emi=1;
	_start=1; _start=0; 
}
void Titration_detection()
{
    /*if(didin_level>8){per_didin_value=0.143+didin_level*0.0012;}  //45ml=0.1538
    if(didin_level>4&&didin_level<=8){per_didin_value=0.1435+didin_level*0.0015;}  //25ml=0.151  30ml=0.1525 40ml=0.1555            
    if(didin_level>1 && didin_level<=4){per_didin_value=0.115+didin_level*0.012;}  //10ml=0.139  15ml=0.151  20ml=0.163
    if(didin_level>=0 && didin_level<=1){per_didin_value=0.121+didin_level*0.0065;}*/
    
    /*if(didin_level>8){per_didin_value=0.143+didin_level*0.0012;}
    if(didin_level>7 && didin_level<=8){per_didin_value=0.1555;}  
    if(didin_level>6 && didin_level<=7){per_didin_value=0.154;}  
    if(didin_level>5 && didin_level<=6){per_didin_value=0.1525;}  
    if(didin_level>4 && didin_level<=5){per_didin_value=0.160;}  
    if(didin_level>3 && didin_level<=4){per_didin_value=0.152;}  
    if(didin_level>2 && didin_level<=3){per_didin_value=0.148;}  
    if(didin_level>1 && didin_level<=2){per_didin_value=0.143;}  
    if(didin_level>=0 && didin_level<=1){per_didin_value=0.121+didin_level*0.0065;}*/
    
    
    per_didin_value=0.04;
    if(result>=12 && buttonup==1)
	{
		LED3=!LED3;	
		waste=waste+per_didin_value;
		
		if(start_mode==1)
		{
			diff_value=set_didin_value-waste;
			
			last_value2=last_value+waste;
			if(diff_value<=0){start_mode=0;SleepCount=0;}
		}
		if(start_mode==2)
		{
		    diff_value=didin_value-waste;

		    last_value2=last_value-waste;
		    if(diff_value<=0){start_mode=0;SleepCount=0;}
		}
		buttonup=0;
	}
	else if(result<=1 && buttonup==0)
	{
		buttonup=1;
	}	
	
	
}

void turnoff()
{
	LED0=0;
	LED3=1;
	SleepCount=0;
	
}

void main()
{	
    _wdtc=0b10101111;
    Delayms(1000);
	inituart();
    initpwm();
    initTimer();
	ADC();
	step=0;
    LED3C=0;
    LED0C=0;
    LED1C=0;
    LED3=0;
    LED0=0;
    LED1=0;
    SEG_PortC=0x00;
    SEG_Port=0b11111110;
    _fhiden=0;_fsiden=0; _emi=1;
    if(_pdf) {_clrwdt();} 
    else {SleepCount=0;}
    
    /*_eeah=0x00;_eeal=0x05;
    Write(20);*/

	_eeah=0x00;_eeal=0x05;
    last_value=Read();
    last_value2=last_value;
	while(1)
	{
    	SEG_Port=last_value2;
		_st2on=1;
		if(last_value2>70)
		{
			start_mode=0;out=0;
			last_value2=70;
		}
		if(last_value2<0)
		{
		    start_mode=0;out=0;
			last_value2=0;	
		}
        if(start_mode==0)
        {
        	out=0;
        	if(step<5){
        	   send_buff1("main_view.t0.txt=");
	           send_char1('"');
	           send_buff1("待機中");
	           send_char1('"');
	           send_buff1("\xff\xff\xff");
	           step++;
        	}
        }
		if(start_mode==1)
		{
			if(step<5){
			   send_buff1("main_view.t0.txt=");
	           send_char1('"');
	           send_buff1("吸取中");
	           send_char1('"');
	           send_buff1("\xff\xff\xff");
	           step++;
			}
			Titration_detection();
		    if(diff_value>100) {out=1000;}
    	    if(diff_value<=100 && diff_value>10) {out=1000;}
    	    if(diff_value<=10 && diff_value>5) {out=750;}
    	    if(diff_value<=5 && diff_value>3) {out=500;}
    	    if(diff_value<=2 && diff_value>0) {out=300;}
    	    if(diff_value<=0) {start_mode=0; out=0;step=0;}
    	}
		if(start_mode==2)
		{
			if(step<5){
			   send_buff1("main_view.t0.txt=");
	           send_char1('"');
	           send_buff1("滴定中");
	           send_char1('"');
	           send_buff1("\xff\xff\xff");
	           step++;
			}
			Titration_detection();
		    if(diff_value>100) {out=1000;}
    	    if(diff_value<=100 && diff_value>10) {out=1000;}
    	    if(diff_value<=10 && diff_value>5) {out=750;}
    	    if(diff_value<=5 && diff_value>3) {out=500;}
    	    if(diff_value<=2 && diff_value>0) {out=300;}
    	    if(diff_value<=0) {start_mode=0; out=0;step=0;}
		}
		pwm_output(out);

		if(SleepCount>=200)
		{
			_pas1=0b00000000;
            _papu6=1;								
	        _pac6=1;	
	        _ifs2=0b00000001;							  
            _integ=0b00000010;
			SEG_Port=0b10101010;
			turnoff();
			_int0f=0;
			_int0e=1;				 		       //Enable INT0E 
			_halt();                               //Goto Sleep....
			_int0e=0;
		}
	}
}


DEFINE_ISR(ISR_INT0,0x04)
{	
	SEG_Port=0b01111111;
	LED1=0;		
    LED3=0;					   
	/*for(i=0;i<7;i++) 
	{	
		Delayms(1000);   
		SEG_Port=SEG_Port>>1|0b10000000;	 				   
	}*/
	inituart();
    initpwm();
    initTimer();
	ADC();
	SleepCount=0;
	_int0f=0;		
}

DEFINE_ISR(UART,0x3C)
{
	char buff1[50]={'\0'};
    char buff2[50]={'\0'};
	if(_ur0f==1)
	{
	  uart1data = get_buff1(buff1,'\xff');
	  check1(buff1);
	}
	if(_ur2f==1)
	{
	  uart2data = get_buff2(buff2,'\xff');
	  check2(buff2);
	}
	_mf5f=0;
	_ur0f=0;
	_ur2f=0;
	_emi=0;	
}

void send1()
{
	send_buff2("d=");
	send_char2(diff_value);
	send_buff2("\xff\xff\xff");
}

void send2()
{
	send_buff1("main_view.n2.val=");
	send_char1(dnum10);
    send_char1(dnum1);
	send_buff1("\xff\xff\xff");
	send_buff2("n=");
	send_char2(diff_value);
	send_buff2("\xff\xff\xff");
}

DEFINE_ISR(ISR_ADC,0x1C)
{	
    result=((unsigned int)_sadoh);
    //send_char2(result);
	_start=1; _start=0; 					//啟動AD轉換			
}
DEFINE_ISR(ISR_STM2,0x38)
{   
	LED0=!LED0;							//改變LED1狀態
	_stm2af=0;							//共享型,旗標要自行清除
	dnum10=diff_value/10+48;
	dnum1=diff_value%10+48;
	last10=last_value2/10+48;
	last1=last_value2%10+48;
    send_buff1("last.n0.val=");
	send_char1(last10);
	send_char1(last1);
	send_buff1("\xff\xff\xff");
	if(LED0==1){
		send_buff2("last=");
	    send_char2(last_value2);
	    send_buff2("\xff\xff\xff");
	}
	if(start_mode==0)
	{
		SleepCount++;
	}
	if(start_mode==1)
	{
		send1();
	}
	if(start_mode==2)
	{
		send2();
	}
	_eeah=0x00;_eeal=0x05;
    Write(last_value2); 
}
